<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<title>NovelTea: include/NovelTea/json.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript">
	DoxygenAwesomeFragmentCopyButton.init()
	DoxygenAwesomeDarkModeToggle.init()
	DoxygenAwesomeParagraphLink.init()
</script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="custom.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">NovelTea
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">Text Game Engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('json_8hpp_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">json.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="json_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;cctype&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;deque&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// Android bugfix</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span>std</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; std::string to_string(<span class="keyword">const</span> T&amp; n)</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        std::ostringstream stm;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        stm.precision(6);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        stm &lt;&lt; std::fixed &lt;&lt; n;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordflow">return</span> stm.str();</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    }</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacesj.htm">   31</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacesj.htm">sj</a> {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">using</span> <a class="code" href="namespace_novel_tea_1_1_i_d.htm#acddb743dee25ba2f993845c0001bcd9b">std::map</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">using</span> std::deque;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">using</span> std::string;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">using</span> std::enable_if;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">using</span> std::initializer_list;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">using</span> std::is_same;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">using</span> std::is_convertible;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">using</span> std::is_integral;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">using</span> std::is_floating_point;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">string</span> json_escape( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;str ) {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordtype">string</span> output;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> i = 0; i &lt; str.length(); ++i )</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">switch</span>( str[i] ) {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\&quot;&#39;</span>: output += <span class="stringliteral">&quot;\\\&quot;&quot;</span>; <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\\&#39;</span>: output += <span class="stringliteral">&quot;\\\\&quot;</span>; <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\b&#39;</span>: output += <span class="stringliteral">&quot;\\b&quot;</span>;  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\f&#39;</span>: output += <span class="stringliteral">&quot;\\f&quot;</span>;  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\n&#39;</span>: output += <span class="stringliteral">&quot;\\n&quot;</span>;  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\r&#39;</span>: output += <span class="stringliteral">&quot;\\r&quot;</span>;  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;\t&#39;</span>: output += <span class="stringliteral">&quot;\\t&quot;</span>;  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                default  : output += str[i]; <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">return</span> std::move( output );</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm">   61</a></span>&#160;<span class="keyword">class </span><a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">union </span>BackingData {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        BackingData( <span class="keywordtype">double</span> d ) : Float( d ){}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        BackingData( <span class="keywordtype">long</span>   l ) : Int( l ){}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        BackingData( <span class="keywordtype">bool</span>   b ) : Bool( b ){}</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        BackingData( <span class="keywordtype">string</span> s ) : String( <span class="keyword">new</span> <span class="keywordtype">string</span>( s ) ){}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        BackingData()           : Int( 0 ){}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        deque&lt;JSON&gt;        *List;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        map&lt;string,JSON&gt;   *Map;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordtype">string</span>             *String;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">double</span>              Float;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordtype">long</span>                Int;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordtype">bool</span>                Bool;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    } Internal;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">   79</a></span>&#160;        <span class="keyword">enum class</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a> {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Null</a>,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Object</a>,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Array</a>,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">String</a>,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c">Floating</a>,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e">Integral</a>,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b">Boolean</a></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        };</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">   90</a></span>&#160;        <span class="keyword">class </span><a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper</a> {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            Container *object;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keyword">public</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a15aa889917a7566ebd0c9ee9704cfd8d">   94</a></span>&#160;                <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a15aa889917a7566ebd0c9ee9704cfd8d">JSONWrapper</a>( Container *val ) : object( val ) {}</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#af870e89e391a5804b76d48f550ff6e1c">   95</a></span>&#160;                <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#af870e89e391a5804b76d48f550ff6e1c">JSONWrapper</a>( std::nullptr_t )  : object( nullptr ) {}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a3adf326e57dbabb38488de3e2e3b04b5">   97</a></span>&#160;                <span class="keyword">typename</span> Container::iterator <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a3adf326e57dbabb38488de3e2e3b04b5">begin</a>() { <span class="keywordflow">return</span> <span class="keywordtype">object</span> ? <span class="keywordtype">object</span>-&gt;begin() : <span class="keyword">typename</span> Container::iterator(); }</div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a8d36d6668344c5ffca60d4bd3e9cfad8">   98</a></span>&#160;                <span class="keyword">typename</span> Container::iterator <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a8d36d6668344c5ffca60d4bd3e9cfad8">end</a>() { <span class="keywordflow">return</span> <span class="keywordtype">object</span> ? <span class="keywordtype">object</span>-&gt;end() : <span class="keyword">typename</span> Container::iterator(); }</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#ae0c9037e19607fb34e08110916b26202">   99</a></span>&#160;                <span class="keyword">typename</span> Container::const_iterator <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#ae0c9037e19607fb34e08110916b26202">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keywordtype">object</span> ? <span class="keywordtype">object</span>-&gt;begin() : <span class="keyword">typename</span> Container::iterator(); }</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a63dd885846cac3a71394bad41e80cb8d">  100</a></span>&#160;                <span class="keyword">typename</span> Container::const_iterator <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a63dd885846cac3a71394bad41e80cb8d">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keywordtype">object</span> ? <span class="keywordtype">object</span>-&gt;end() : <span class="keyword">typename</span> Container::iterator(); }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        };</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">  104</a></span>&#160;        <span class="keyword">class </span><a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper</a> {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> Container *object;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">public</span>:</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#ab6fabd86c7faa874503647e76cfb67e6">  108</a></span>&#160;                <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#ab6fabd86c7faa874503647e76cfb67e6">JSONConstWrapper</a>( <span class="keyword">const</span> Container *val ) : object( val ) {}</div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#aefff02cfaba099d26d955a3240c21cd6">  109</a></span>&#160;                <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#aefff02cfaba099d26d955a3240c21cd6">JSONConstWrapper</a>( std::nullptr_t )  : object( nullptr ) {}</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#aaa4ad66880c2d074f3419e173160f2ad">  111</a></span>&#160;                <span class="keyword">typename</span> Container::const_iterator <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#aaa4ad66880c2d074f3419e173160f2ad">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keywordtype">object</span> ? <span class="keywordtype">object</span>-&gt;begin() : <span class="keyword">typename</span> Container::const_iterator(); }</div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#a95235353a7718fdba56ff2ccc1f79ad9">  112</a></span>&#160;                <span class="keyword">typename</span> Container::const_iterator <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#a95235353a7718fdba56ff2ccc1f79ad9">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keywordtype">object</span> ? <span class="keywordtype">object</span>-&gt;end() : <span class="keyword">typename</span> Container::const_iterator(); }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        };</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a8f45c59bb0d18fe1372ee2582881923b">  115</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a8f45c59bb0d18fe1372ee2582881923b">JSON</a>() : Internal(), Type( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a>::Null ){}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ad098259d00668616f2ca2d984cab5662">  117</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#ad098259d00668616f2ca2d984cab5662">JSON</a>( initializer_list&lt;JSON&gt; list )</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            : <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>()</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a> );</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">for</span>( <span class="keyword">auto</span> i = list.begin(), e = list.end(); i != e; ++i, ++i )</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <a class="code" href="classsj_1_1_j_s_o_n.htm#a90a5279cf4799587fcbcd196fe49c0fe">operator[]</a>( i-&gt;ToString() ) = *std::next( i );</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a4b7053c37b4ec930a330397904eb02d8">  125</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a4b7053c37b4ec930a330397904eb02d8">JSON</a>( <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp;&amp; other )</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            : Internal( other.Internal )</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            , Type( other.Type )</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        { other.Type = <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Class::Null</a>; other.Internal.Map = <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ad450fd17d266b1b1f59e9fb01a2bdc16">  130</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#ad450fd17d266b1b1f59e9fb01a2bdc16">operator=</a>( <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp;&amp; other ) {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            ClearInternal();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            Internal = other.Internal;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            Type = other.Type;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            other.Internal.Map = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            other.Type = <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Class::Null</a>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a037662eacf4ecd46857fa05f86b6b41d">  139</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a037662eacf4ecd46857fa05f86b6b41d">JSON</a>( <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp;other ) {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">switch</span>( other.Type ) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                Internal.Map =</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    <span class="keyword">new</span> map&lt;string,JSON&gt;( other.Internal.Map-&gt;begin(),</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                          other.Internal.Map-&gt;end() );</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>:</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                Internal.List =</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="keyword">new</span> deque&lt;JSON&gt;( other.Internal.List-&gt;begin(),</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                      other.Internal.List-&gt;end() );</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                Internal.String =</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keyword">new</span> string( *other.Internal.String );</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                Internal = other.Internal;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            Type = other.Type;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ac923ac49bd979cf40a2f019d4f782a12">  161</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#ac923ac49bd979cf40a2f019d4f782a12">operator=</a>( <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp;other ) {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            ClearInternal();</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">switch</span>( other.Type ) {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>:</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                Internal.Map =</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">new</span> map&lt;string,JSON&gt;( other.Internal.Map-&gt;begin(),</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                          other.Internal.Map-&gt;end() );</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                Internal.List =</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    <span class="keyword">new</span> deque&lt;JSON&gt;( other.Internal.List-&gt;begin(),</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                      other.Internal.List-&gt;end() );</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a>:</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                Internal.String =</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keyword">new</span> string( *other.Internal.String );</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                Internal = other.Internal;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            Type = other.Type;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a693a4db1d474783f60d10ce056075c03">  185</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a693a4db1d474783f60d10ce056075c03">~JSON</a>() {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">switch</span>( Type ) {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">delete</span> Internal.List;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keyword">delete</span> Internal.Map;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a>:</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keyword">delete</span> Internal.String;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">default</span>:;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a5cedaf40c0e1ecb3075a5867be61e5c0">  201</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a5cedaf40c0e1ecb3075a5867be61e5c0">JSON</a>( T b, <span class="keyword">typename</span> enable_if&lt;is_same&lt;T,bool&gt;::value&gt;::type* = 0 ) : Internal( b ), Type( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a>::Boolean ){}</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a7ca9a2b2295174cc2dceb33c295d9cb9">  204</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a7ca9a2b2295174cc2dceb33c295d9cb9">JSON</a>( T i, <span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value &amp;&amp; !is_same&lt;T,bool&gt;::value&gt;::type* = 0 ) : Internal( (long)i ), Type( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a>::Integral ){}</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#adbcdb119110616fcbd248d7807b815fb">  207</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#adbcdb119110616fcbd248d7807b815fb">JSON</a>( T f, <span class="keyword">typename</span> enable_if&lt;is_floating_point&lt;T&gt;::value&gt;::type* = 0 ) : Internal( (double)f ), Type( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a>::Floating ){}</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a677518df28d15da20aef530b4b642e92">  210</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a677518df28d15da20aef530b4b642e92">JSON</a>( T s, <span class="keyword">typename</span> enable_if&lt;is_convertible&lt;T,string&gt;::value&gt;::type* = 0 ) : Internal( string( s ) ), Type( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a>::String ){}</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a0b4fea4dc17b0b007e3f17591968c4b4">  212</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a0b4fea4dc17b0b007e3f17591968c4b4">JSON</a>( std::nullptr_t ) : Internal(), Type( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a>::Null ){}</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#afe158b1343c3e6488e7e72ce8e3465ef">  214</a></span>&#160;        <span class="keyword">static</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> <a class="code" href="classsj_1_1_j_s_o_n.htm#afe158b1343c3e6488e7e72ce8e3465ef">Make</a>( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a> type ) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> ret; ret.SetType( type );</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a29ce974233694d76c6550adbdc7f2a1a">  219</a></span>&#160;        <span class="keyword">static</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> <a class="code" href="classsj_1_1_j_s_o_n.htm#a29ce974233694d76c6550adbdc7f2a1a">Load</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; );</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a59961716155b7fb9ab488a0940984a3b">  222</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a59961716155b7fb9ab488a0940984a3b">append</a>( T arg ) {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a> ); Internal.List-&gt;emplace_back( arg );</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... U&gt;</div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a7a7ac34b1de15f0395424b922c7556f4">  227</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a7a7ac34b1de15f0395424b922c7556f4">append</a>( T arg, U... args ) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <a class="code" href="classsj_1_1_j_s_o_n.htm#a59961716155b7fb9ab488a0940984a3b">append</a>( arg ); <a class="code" href="classsj_1_1_j_s_o_n.htm#a59961716155b7fb9ab488a0940984a3b">append</a>( args... );</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a8eb985a85c034def87355e05390f6a0d">  232</a></span>&#160;            <span class="keyword">typename</span> enable_if&lt;is_same&lt;T,bool&gt;::value, <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp;&gt;::type <a class="code" href="classsj_1_1_j_s_o_n.htm#a8eb985a85c034def87355e05390f6a0d">operator=</a>( T b ) {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b">Class::Boolean</a> ); Internal.Bool = b; <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a8ea48f13230d6651dcef269676cceef7">  237</a></span>&#160;            <span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value &amp;&amp; !is_same&lt;T,bool&gt;::value, <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp;&gt;::type <a class="code" href="classsj_1_1_j_s_o_n.htm#a8ea48f13230d6651dcef269676cceef7">operator=</a>( T i ) {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e">Class::Integral</a> ); Internal.Int = i; <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ab5e786f1c9b152da597059e188c57ce6">  242</a></span>&#160;            <span class="keyword">typename</span> enable_if&lt;is_floating_point&lt;T&gt;::value, <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp;&gt;::type <a class="code" href="classsj_1_1_j_s_o_n.htm#ab5e786f1c9b152da597059e188c57ce6">operator=</a>( T f ) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c">Class::Floating</a> ); Internal.Float = f; <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#af402e40a025573a81fd4c9eb9fcc9880">  247</a></span>&#160;            <span class="keyword">typename</span> enable_if&lt;is_convertible&lt;T,string&gt;::value, <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp;&gt;::type <a class="code" href="classsj_1_1_j_s_o_n.htm#af402e40a025573a81fd4c9eb9fcc9880">operator=</a>( T s ) {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a> ); *Internal.String = string( s ); <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a90a5279cf4799587fcbcd196fe49c0fe">  251</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#a90a5279cf4799587fcbcd196fe49c0fe">operator[]</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;key ) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a> ); <span class="keywordflow">return</span> Internal.Map-&gt;operator[]( key );</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#af85e550c8a402ebab4a7ba49b20581fe">  255</a></span>&#160;        <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#af85e550c8a402ebab4a7ba49b20581fe">operator[]</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;key )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">return</span> Internal.Map-&gt;operator[]( key );</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#addec7adde90b0293277c0ef7d050b29e">  259</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#addec7adde90b0293277c0ef7d050b29e">operator[]</a>( <span class="keywordtype">unsigned</span> index ) {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a> );</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">if</span>( index &gt;= Internal.List-&gt;size() ) Internal.List-&gt;resize( index + 1 );</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="keywordflow">return</span> Internal.List-&gt;operator[]( index );</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a07c27fa6d4b14f4a3165dbee4adc323f">  265</a></span>&#160;        <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#a07c27fa6d4b14f4a3165dbee4adc323f">operator[]</a>( <span class="keywordtype">unsigned</span> index )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">if</span>( index &gt;= Internal.List-&gt;size() ) Internal.List-&gt;resize( index + 1 );</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">return</span> Internal.List-&gt;operator[]( index );</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ada96d750321819030ffea8cda9e5a788">  270</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp;<a class="code" href="classsj_1_1_j_s_o_n.htm#ada96d750321819030ffea8cda9e5a788">at</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;key ) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a90a5279cf4799587fcbcd196fe49c0fe">operator[]</a>( key );</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ac1f3f05c485e4a1717d585d576a69c40">  274</a></span>&#160;        <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp;<a class="code" href="classsj_1_1_j_s_o_n.htm#ac1f3f05c485e4a1717d585d576a69c40">at</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;key )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">return</span> Internal.Map-&gt;at( key );</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a3ebbb2081e3dffc75ef41684bc01c1c0">  278</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp;<a class="code" href="classsj_1_1_j_s_o_n.htm#a3ebbb2081e3dffc75ef41684bc01c1c0">at</a>( <span class="keywordtype">unsigned</span> index ) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a90a5279cf4799587fcbcd196fe49c0fe">operator[]</a>( index );</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a5f3ac279f8061af53b427438e5a9cc08">  282</a></span>&#160;        <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp;<a class="code" href="classsj_1_1_j_s_o_n.htm#a5f3ac279f8061af53b427438e5a9cc08">at</a>( <span class="keywordtype">unsigned</span> index )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">return</span> Internal.List-&gt;at( index );</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#afe7a971ed2a752545e379b1661b81f02">  286</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#afe7a971ed2a752545e379b1661b81f02">length</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a> )</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="keywordflow">return</span> Internal.List-&gt;size();</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a48d1a53054f85cb9db907415e8925991">  293</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a48d1a53054f85cb9db907415e8925991">hasKey</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;key )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a> )</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <span class="keywordflow">return</span> Internal.Map-&gt;find( key ) != Internal.Map-&gt;end();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a6d6190ac82c7a5652bdc2bba287d4c23">  299</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a6d6190ac82c7a5652bdc2bba287d4c23">size</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a> )</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="keywordflow">return</span> Internal.Map-&gt;size();</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a> )</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                <span class="keywordflow">return</span> Internal.List-&gt;size();</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a092f5f560fd025c81437be8f0a493020">  308</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a> <a class="code" href="classsj_1_1_j_s_o_n.htm#a092f5f560fd025c81437be8f0a493020">JSONType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Type; }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#acb5870889fdf81f3da7e986fdb55397a">  311</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#acb5870889fdf81f3da7e986fdb55397a">IsArray</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>; }</div>
<div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a242064f494ebaa4b468e911269c8ffbd">  312</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a242064f494ebaa4b468e911269c8ffbd">IsObject</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>; }</div>
<div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a46d00614fdd9c439b3462fc470f5876b">  313</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a46d00614fdd9c439b3462fc470f5876b">IsEmpty</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a43ee4f59136bdafb793e5b2e52893538">  314</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a43ee4f59136bdafb793e5b2e52893538">erase</a>( <span class="keywordtype">unsigned</span> index ){</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            Internal.List-&gt;erase(Internal.List-&gt;begin() + index);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a59c5c5aacd7108e1eac12a2bb28e8769">  317</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a59c5c5aacd7108e1eac12a2bb28e8769">erase</a>( <span class="keyword">const</span> std::string &amp;key ){</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            Internal.Map-&gt;erase(key);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div>
<div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a17a565bb03314704f182ef19195a4aa2">  320</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a17a565bb03314704f182ef19195a4aa2">insert</a>( <span class="keywordtype">unsigned</span> index, <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; j){</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            Internal.List-&gt;insert(Internal.List-&gt;begin() + index, j);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a332a897d858c7c6db82a9d609273844f">  326</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a332a897d858c7c6db82a9d609273844f">IsNull</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Class::Null</a>; }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a112ffa533dbf418c62251db10b64096f">  328</a></span>&#160;        <span class="keywordtype">string</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a112ffa533dbf418c62251db10b64096f">ToString</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a221ab673180aea599d52d207e9251f9b">  329</a></span>&#160;        <span class="keywordtype">string</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a221ab673180aea599d52d207e9251f9b">ToString</a>( <span class="keywordtype">bool</span> &amp;ok ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a09d5ef37ae99f19b63ab6c4b76ce6b83">  331</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a09d5ef37ae99f19b63ab6c4b76ce6b83">ToFloat</a>()<span class="keyword"> const </span>{ <span class="keywordtype">bool</span> b; <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a09d5ef37ae99f19b63ab6c4b76ce6b83">ToFloat</a>( b ); }</div>
<div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a68391e1638f0adfaee2816f7139d734b">  332</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a68391e1638f0adfaee2816f7139d734b">ToFloat</a>( <span class="keywordtype">bool</span> &amp;ok )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            ok = (Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c">Class::Floating</a>);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">return</span> ok ? Internal.Float : 0.0;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a10f06e9c3591d3cec1710c01f6d95563">  337</a></span>&#160;        <span class="keywordtype">long</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a10f06e9c3591d3cec1710c01f6d95563">ToInt</a>()<span class="keyword"> const </span>{ <span class="keywordtype">bool</span> b; <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a10f06e9c3591d3cec1710c01f6d95563">ToInt</a>( b ); }</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a0733e1ad8dbe8846f7df7676943757e4">  338</a></span>&#160;        <span class="keywordtype">long</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a0733e1ad8dbe8846f7df7676943757e4">ToInt</a>( <span class="keywordtype">bool</span> &amp;ok )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            ok = (Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e">Class::Integral</a>);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">return</span> ok ? Internal.Int : 0;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a12b2f609f9b5940b14b4d6fd55a37870">  343</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a12b2f609f9b5940b14b4d6fd55a37870">ToBool</a>()<span class="keyword"> const </span>{ <span class="keywordtype">bool</span> b; <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a12b2f609f9b5940b14b4d6fd55a37870">ToBool</a>( b ); }</div>
<div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a8dbbbb12a8c6ef8affdebaa608446f9f">  344</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a8dbbbb12a8c6ef8affdebaa608446f9f">ToBool</a>( <span class="keywordtype">bool</span> &amp;ok )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            ok = (Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b">Class::Boolean</a>);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">return</span> ok ? Internal.Bool : <span class="keyword">false</span>;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ab11f62a2a7980884b167f822668e6ce8">  349</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper&lt;map&lt;string,JSON&gt;</a>&gt; <a class="code" href="classsj_1_1_j_s_o_n.htm#ab11f62a2a7980884b167f822668e6ce8">ObjectRange</a>() {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a> )</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper&lt;map&lt;string,JSON&gt;</a>&gt;( Internal.Map );</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper&lt;map&lt;string,JSON&gt;</a>&gt;( nullptr );</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ae5784e356aa1ce43564f24d304da3284">  355</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper&lt;deque&lt;JSON&gt;</a>&gt; <a class="code" href="classsj_1_1_j_s_o_n.htm#ae5784e356aa1ce43564f24d304da3284">ArrayRange</a>() {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a> )</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper&lt;deque&lt;JSON&gt;</a>&gt;( Internal.List );</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">JSONWrapper&lt;deque&lt;JSON&gt;</a>&gt;( nullptr );</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a0fcb034e7ee0b85cae5de98fc78435e7">  361</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper&lt;map&lt;string,JSON&gt;</a>&gt; <a class="code" href="classsj_1_1_j_s_o_n.htm#a0fcb034e7ee0b85cae5de98fc78435e7">ObjectRange</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a> )</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper&lt;map&lt;string,JSON&gt;</a>&gt;( Internal.Map );</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper&lt;map&lt;string,JSON&gt;</a>&gt;( nullptr );</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a0f2c047bf96609ff9d2a0a76992cdd46">  368</a></span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper&lt;deque&lt;JSON&gt;</a>&gt; <a class="code" href="classsj_1_1_j_s_o_n.htm#a0f2c047bf96609ff9d2a0a76992cdd46">ArrayRange</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">if</span>( Type == <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a> )</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper&lt;deque&lt;JSON&gt;</a>&gt;( Internal.List );</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">JSONConstWrapper&lt;deque&lt;JSON&gt;</a>&gt;( nullptr );</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#ab7cd4c2f027ef283666c1871c198fd70">  374</a></span>&#160;        <span class="keywordtype">string</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#ab7cd4c2f027ef283666c1871c198fd70">dump</a>( <span class="keywordtype">int</span> depth = 1, <span class="keywordtype">string</span> tab = <span class="stringliteral">&quot;  &quot;</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keywordtype">string</span> pad = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0; i &lt; depth; ++i, pad += tab );</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">switch</span>( Type ) {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Class::Null</a>:</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="keywordflow">return</span> <span class="stringliteral">&quot;null&quot;</span>;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>: {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    <span class="keywordtype">string</span> s = <span class="stringliteral">&quot;{\n&quot;</span>;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keywordtype">bool</span> skip = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;p : *Internal.Map ) {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        <span class="keywordflow">if</span>( !skip ) s += <span class="stringliteral">&quot;,\n&quot;</span>;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                        s += ( pad + <span class="stringliteral">&quot;\&quot;&quot;</span> + p.first + <span class="stringliteral">&quot;\&quot; : &quot;</span> + p.second.dump( depth + 1, tab ) );</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                        skip = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    s += ( <span class="stringliteral">&quot;\n&quot;</span> + pad.erase( 0, 2 ) + <span class="stringliteral">&quot;}&quot;</span> ) ;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>: {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keywordtype">string</span> s = <span class="stringliteral">&quot;[&quot;</span>;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="keywordtype">bool</span> skip = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;p : *Internal.List ) {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="keywordflow">if</span>( !skip ) s += <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        s += p.dump( depth + 1, tab );</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        skip = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    s += <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a>:</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    <span class="keywordflow">return</span> <span class="stringliteral">&quot;\&quot;&quot;</span> + json_escape( *Internal.String ) + <span class="stringliteral">&quot;\&quot;&quot;</span>;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c">Class::Floating</a>:</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    <span class="keywordflow">return</span> std::to_string( Internal.Float );</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e">Class::Integral</a>:</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <span class="keywordflow">return</span> std::to_string( Internal.Int );</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b">Class::Boolean</a>:</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <span class="keywordflow">return</span> Internal.Bool ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a5513ab67f2660e88d73c75fc83b6945c">  417</a></span>&#160;        <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="classsj_1_1_j_s_o_n.htm#a5513ab67f2660e88d73c75fc83b6945c">operator&lt;&lt;</a>( std::ostream&amp;, <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> &amp; );</div>
<div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a4a1cd3004a3aa078cbc2b33192d26e49">  418</a></span>&#160;        <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a4a1cd3004a3aa078cbc2b33192d26e49">operator ==</a>(<span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; right);</div>
<div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="classsj_1_1_j_s_o_n.htm#a3c907350dcd3560cb3800253e99a4481">  419</a></span>&#160;        <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a3c907350dcd3560cb3800253e99a4481">operator !=</a>(<span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a>&amp; right);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keywordtype">void</span> SetType( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a> type ) {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="keywordflow">if</span>( type == Type )</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            ClearInternal();</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">switch</span>( type ) {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Class::Null</a>:      Internal.Map    = <span class="keyword">nullptr</span>;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>:    Internal.Map    = <span class="keyword">new</span> map&lt;string,JSON&gt;(); <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>:     Internal.List   = <span class="keyword">new</span> deque&lt;JSON&gt;();     <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a>:    Internal.String = <span class="keyword">new</span> string();           <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c">Class::Floating</a>:  Internal.Float  = 0.0;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e">Class::Integral</a>:  Internal.Int    = 0;                      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b">Class::Boolean</a>:   Internal.Bool   = <span class="keyword">false</span>;                  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            Type = type;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        }</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;      <span class="comment">/* beware: only call if YOU know that Internal is allocated. No checks performed here.</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">         This function should be called in a constructed JSON just before you are going to</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">        overwrite Internal...</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">      */</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;      <span class="keywordtype">void</span> ClearInternal() {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">switch</span>( Type ) {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;          <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">Class::Object</a>: <span class="keyword">delete</span> Internal.Map;    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;          <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">Class::Array</a>:  <span class="keyword">delete</span> Internal.List;   <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;          <span class="keywordflow">case</span> <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">Class::String</a>: <span class="keyword">delete</span> Internal.String; <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;          <span class="keywordflow">default</span>:;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;      }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">Class</a> Type = <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">Class::Null</a>;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;};</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="namespacesj.htm#a6132551f280a7cdbe4238bd0c500e341">  460</a></span>&#160;<a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> <a class="code" href="namespacesj.htm#a6132551f280a7cdbe4238bd0c500e341">Array</a>();</div>
<div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="namespacesj.htm#a88220e646869a2a070cb88b31e6f2aa6">  461</a></span>&#160;<a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> <a class="code" href="namespacesj.htm#a88220e646869a2a070cb88b31e6f2aa6">Object</a>();</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... T&gt;</div>
<div class="line"><a name="l00464"></a><span class="lineno"><a class="line" href="namespacesj.htm#a0ba89b8e39c7ef97fbf432394b55944c">  464</a></span>&#160;<a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> <a class="code" href="namespacesj.htm#a6132551f280a7cdbe4238bd0c500e341">Array</a>( T... args ) {</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <a class="code" href="classsj_1_1_j_s_o_n.htm">JSON</a> arr = <a class="code" href="classsj_1_1_j_s_o_n.htm#afe158b1343c3e6488e7e72ce8e3465ef">JSON::Make</a>( <a class="code" href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">JSON::Class::Array</a> );</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    arr.<a class="code" href="classsj_1_1_j_s_o_n.htm#a59961716155b7fb9ab488a0940984a3b">append</a>( args... );</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">return</span> std::move( arr );</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;} <span class="comment">// End Namespace json</span></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper_htm"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm">sj::JSON::JSONConstWrapper</a></div><div class="ttdef"><b>Definition:</b> json.hpp:104</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper_htm_a95235353a7718fdba56ff2ccc1f79ad9"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#a95235353a7718fdba56ff2ccc1f79ad9">sj::JSON::JSONConstWrapper::end</a></div><div class="ttdeci">Container::const_iterator end() const</div><div class="ttdef"><b>Definition:</b> json.hpp:112</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper_htm_aaa4ad66880c2d074f3419e173160f2ad"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#aaa4ad66880c2d074f3419e173160f2ad">sj::JSON::JSONConstWrapper::begin</a></div><div class="ttdeci">Container::const_iterator begin() const</div><div class="ttdef"><b>Definition:</b> json.hpp:111</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper_htm_ab6fabd86c7faa874503647e76cfb67e6"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#ab6fabd86c7faa874503647e76cfb67e6">sj::JSON::JSONConstWrapper::JSONConstWrapper</a></div><div class="ttdeci">JSONConstWrapper(const Container *val)</div><div class="ttdef"><b>Definition:</b> json.hpp:108</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper_htm_aefff02cfaba099d26d955a3240c21cd6"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_const_wrapper.htm#aefff02cfaba099d26d955a3240c21cd6">sj::JSON::JSONConstWrapper::JSONConstWrapper</a></div><div class="ttdeci">JSONConstWrapper(std::nullptr_t)</div><div class="ttdef"><b>Definition:</b> json.hpp:109</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm">sj::JSON::JSONWrapper</a></div><div class="ttdef"><b>Definition:</b> json.hpp:90</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm_a15aa889917a7566ebd0c9ee9704cfd8d"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a15aa889917a7566ebd0c9ee9704cfd8d">sj::JSON::JSONWrapper::JSONWrapper</a></div><div class="ttdeci">JSONWrapper(Container *val)</div><div class="ttdef"><b>Definition:</b> json.hpp:94</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm_a3adf326e57dbabb38488de3e2e3b04b5"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a3adf326e57dbabb38488de3e2e3b04b5">sj::JSON::JSONWrapper::begin</a></div><div class="ttdeci">Container::iterator begin()</div><div class="ttdef"><b>Definition:</b> json.hpp:97</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm_a63dd885846cac3a71394bad41e80cb8d"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a63dd885846cac3a71394bad41e80cb8d">sj::JSON::JSONWrapper::end</a></div><div class="ttdeci">Container::const_iterator end() const</div><div class="ttdef"><b>Definition:</b> json.hpp:100</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm_a8d36d6668344c5ffca60d4bd3e9cfad8"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#a8d36d6668344c5ffca60d4bd3e9cfad8">sj::JSON::JSONWrapper::end</a></div><div class="ttdeci">Container::iterator end()</div><div class="ttdef"><b>Definition:</b> json.hpp:98</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm_ae0c9037e19607fb34e08110916b26202"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#ae0c9037e19607fb34e08110916b26202">sj::JSON::JSONWrapper::begin</a></div><div class="ttdeci">Container::const_iterator begin() const</div><div class="ttdef"><b>Definition:</b> json.hpp:99</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper_htm_af870e89e391a5804b76d48f550ff6e1c"><div class="ttname"><a href="classsj_1_1_j_s_o_n_1_1_j_s_o_n_wrapper.htm#af870e89e391a5804b76d48f550ff6e1c">sj::JSON::JSONWrapper::JSONWrapper</a></div><div class="ttdeci">JSONWrapper(std::nullptr_t)</div><div class="ttdef"><b>Definition:</b> json.hpp:95</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm">sj::JSON</a></div><div class="ttdef"><b>Definition:</b> json.hpp:62</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a037662eacf4ecd46857fa05f86b6b41d"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a037662eacf4ecd46857fa05f86b6b41d">sj::JSON::JSON</a></div><div class="ttdeci">JSON(const JSON &amp;other)</div><div class="ttdef"><b>Definition:</b> json.hpp:139</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a0733e1ad8dbe8846f7df7676943757e4"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a0733e1ad8dbe8846f7df7676943757e4">sj::JSON::ToInt</a></div><div class="ttdeci">long ToInt(bool &amp;ok) const</div><div class="ttdef"><b>Definition:</b> json.hpp:338</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a07c27fa6d4b14f4a3165dbee4adc323f"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a07c27fa6d4b14f4a3165dbee4adc323f">sj::JSON::operator[]</a></div><div class="ttdeci">const JSON &amp; operator[](unsigned index) const</div><div class="ttdef"><b>Definition:</b> json.hpp:265</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a092f5f560fd025c81437be8f0a493020"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a092f5f560fd025c81437be8f0a493020">sj::JSON::JSONType</a></div><div class="ttdeci">Class JSONType() const</div><div class="ttdef"><b>Definition:</b> json.hpp:308</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a09d5ef37ae99f19b63ab6c4b76ce6b83"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a09d5ef37ae99f19b63ab6c4b76ce6b83">sj::JSON::ToFloat</a></div><div class="ttdeci">double ToFloat() const</div><div class="ttdef"><b>Definition:</b> json.hpp:331</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a0b4fea4dc17b0b007e3f17591968c4b4"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a0b4fea4dc17b0b007e3f17591968c4b4">sj::JSON::JSON</a></div><div class="ttdeci">JSON(std::nullptr_t)</div><div class="ttdef"><b>Definition:</b> json.hpp:212</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a0f2c047bf96609ff9d2a0a76992cdd46"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a0f2c047bf96609ff9d2a0a76992cdd46">sj::JSON::ArrayRange</a></div><div class="ttdeci">JSONConstWrapper&lt; deque&lt; JSON &gt; &gt; ArrayRange() const</div><div class="ttdef"><b>Definition:</b> json.hpp:368</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a0fcb034e7ee0b85cae5de98fc78435e7"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a0fcb034e7ee0b85cae5de98fc78435e7">sj::JSON::ObjectRange</a></div><div class="ttdeci">JSONConstWrapper&lt; map&lt; string, JSON &gt; &gt; ObjectRange() const</div><div class="ttdef"><b>Definition:</b> json.hpp:361</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a10f06e9c3591d3cec1710c01f6d95563"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a10f06e9c3591d3cec1710c01f6d95563">sj::JSON::ToInt</a></div><div class="ttdeci">long ToInt() const</div><div class="ttdef"><b>Definition:</b> json.hpp:337</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a112ffa533dbf418c62251db10b64096f"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a112ffa533dbf418c62251db10b64096f">sj::JSON::ToString</a></div><div class="ttdeci">string ToString() const</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a12b2f609f9b5940b14b4d6fd55a37870"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a12b2f609f9b5940b14b4d6fd55a37870">sj::JSON::ToBool</a></div><div class="ttdeci">bool ToBool() const</div><div class="ttdef"><b>Definition:</b> json.hpp:343</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a17a565bb03314704f182ef19195a4aa2"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a17a565bb03314704f182ef19195a4aa2">sj::JSON::insert</a></div><div class="ttdeci">void insert(unsigned index, const JSON &amp;j)</div><div class="ttdef"><b>Definition:</b> json.hpp:320</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a221ab673180aea599d52d207e9251f9b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a221ab673180aea599d52d207e9251f9b">sj::JSON::ToString</a></div><div class="ttdeci">string ToString(bool &amp;ok) const</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a242064f494ebaa4b468e911269c8ffbd"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a242064f494ebaa4b468e911269c8ffbd">sj::JSON::IsObject</a></div><div class="ttdeci">bool IsObject() const</div><div class="ttdef"><b>Definition:</b> json.hpp:312</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a29ce974233694d76c6550adbdc7f2a1a"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a29ce974233694d76c6550adbdc7f2a1a">sj::JSON::Load</a></div><div class="ttdeci">static JSON Load(const string &amp;)</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a332a897d858c7c6db82a9d609273844f"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a332a897d858c7c6db82a9d609273844f">sj::JSON::IsNull</a></div><div class="ttdeci">bool IsNull() const</div><div class="ttdoc">Functions for getting primitives from the JSON object.</div><div class="ttdef"><b>Definition:</b> json.hpp:326</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a3c907350dcd3560cb3800253e99a4481"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a3c907350dcd3560cb3800253e99a4481">sj::JSON::operator!=</a></div><div class="ttdeci">friend bool operator!=(const JSON &amp;left, const JSON &amp;right)</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a3ebbb2081e3dffc75ef41684bc01c1c0"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a3ebbb2081e3dffc75ef41684bc01c1c0">sj::JSON::at</a></div><div class="ttdeci">JSON &amp; at(unsigned index)</div><div class="ttdef"><b>Definition:</b> json.hpp:278</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a43ee4f59136bdafb793e5b2e52893538"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a43ee4f59136bdafb793e5b2e52893538">sj::JSON::erase</a></div><div class="ttdeci">void erase(unsigned index)</div><div class="ttdef"><b>Definition:</b> json.hpp:314</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a46d00614fdd9c439b3462fc470f5876b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a46d00614fdd9c439b3462fc470f5876b">sj::JSON::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a48d1a53054f85cb9db907415e8925991"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a48d1a53054f85cb9db907415e8925991">sj::JSON::hasKey</a></div><div class="ttdeci">bool hasKey(const string &amp;key) const</div><div class="ttdef"><b>Definition:</b> json.hpp:293</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a4a1cd3004a3aa078cbc2b33192d26e49"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a4a1cd3004a3aa078cbc2b33192d26e49">sj::JSON::operator==</a></div><div class="ttdeci">friend bool operator==(const JSON &amp;left, const JSON &amp;right)</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a4b7053c37b4ec930a330397904eb02d8"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a4b7053c37b4ec930a330397904eb02d8">sj::JSON::JSON</a></div><div class="ttdeci">JSON(JSON &amp;&amp;other)</div><div class="ttdef"><b>Definition:</b> json.hpp:125</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528a"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528a">sj::JSON::Class</a></div><div class="ttdeci">Class</div><div class="ttdef"><b>Definition:</b> json.hpp:79</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27118326006d3829667a400ad23d5d98">sj::JSON::Class::String</a></div><div class="ttdeci">@ String</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa27226c864bac7454a8504f8edb15d95b">sj::JSON::Class::Boolean</a></div><div class="ttdeci">@ Boolean</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4410ec34d9e6c1a68100ca0ce033fb17">sj::JSON::Class::Array</a></div><div class="ttdeci">@ Array</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa497031794414a552435f90151ac3b54b">sj::JSON::Class::Object</a></div><div class="ttdeci">@ Object</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aa4ea94552a2bec56a29592359a1b6069e">sj::JSON::Class::Integral</a></div><div class="ttdeci">@ Integral</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aabbb93ef26e3c101ff11cdd21cab08a94">sj::JSON::Class::Null</a></div><div class="ttdeci">@ Null</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a50a38c9e0b804e3d660ac03c3492528aac8df43648942ec3a9aec140f07f47b7c">sj::JSON::Class::Floating</a></div><div class="ttdeci">@ Floating</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a5513ab67f2660e88d73c75fc83b6945c"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a5513ab67f2660e88d73c75fc83b6945c">sj::JSON::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;, const JSON &amp;)</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a59961716155b7fb9ab488a0940984a3b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a59961716155b7fb9ab488a0940984a3b">sj::JSON::append</a></div><div class="ttdeci">void append(T arg)</div><div class="ttdef"><b>Definition:</b> json.hpp:222</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a59c5c5aacd7108e1eac12a2bb28e8769"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a59c5c5aacd7108e1eac12a2bb28e8769">sj::JSON::erase</a></div><div class="ttdeci">void erase(const std::string &amp;key)</div><div class="ttdef"><b>Definition:</b> json.hpp:317</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a5cedaf40c0e1ecb3075a5867be61e5c0"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a5cedaf40c0e1ecb3075a5867be61e5c0">sj::JSON::JSON</a></div><div class="ttdeci">JSON(T b, typename enable_if&lt; is_same&lt; T, bool &gt;::value &gt;::type *=0)</div><div class="ttdef"><b>Definition:</b> json.hpp:201</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a5f3ac279f8061af53b427438e5a9cc08"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a5f3ac279f8061af53b427438e5a9cc08">sj::JSON::at</a></div><div class="ttdeci">const JSON &amp; at(unsigned index) const</div><div class="ttdef"><b>Definition:</b> json.hpp:282</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a677518df28d15da20aef530b4b642e92"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a677518df28d15da20aef530b4b642e92">sj::JSON::JSON</a></div><div class="ttdeci">JSON(T s, typename enable_if&lt; is_convertible&lt; T, string &gt;::value &gt;::type *=0)</div><div class="ttdef"><b>Definition:</b> json.hpp:210</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a68391e1638f0adfaee2816f7139d734b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a68391e1638f0adfaee2816f7139d734b">sj::JSON::ToFloat</a></div><div class="ttdeci">double ToFloat(bool &amp;ok) const</div><div class="ttdef"><b>Definition:</b> json.hpp:332</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a693a4db1d474783f60d10ce056075c03"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a693a4db1d474783f60d10ce056075c03">sj::JSON::~JSON</a></div><div class="ttdeci">~JSON()</div><div class="ttdef"><b>Definition:</b> json.hpp:185</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a6d6190ac82c7a5652bdc2bba287d4c23"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a6d6190ac82c7a5652bdc2bba287d4c23">sj::JSON::size</a></div><div class="ttdeci">int size() const</div><div class="ttdef"><b>Definition:</b> json.hpp:299</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a7a7ac34b1de15f0395424b922c7556f4"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a7a7ac34b1de15f0395424b922c7556f4">sj::JSON::append</a></div><div class="ttdeci">void append(T arg, U... args)</div><div class="ttdef"><b>Definition:</b> json.hpp:227</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a7ca9a2b2295174cc2dceb33c295d9cb9"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a7ca9a2b2295174cc2dceb33c295d9cb9">sj::JSON::JSON</a></div><div class="ttdeci">JSON(T i, typename enable_if&lt; is_integral&lt; T &gt;::value &amp;&amp;!is_same&lt; T, bool &gt;::value &gt;::type *=0)</div><div class="ttdef"><b>Definition:</b> json.hpp:204</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a8dbbbb12a8c6ef8affdebaa608446f9f"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a8dbbbb12a8c6ef8affdebaa608446f9f">sj::JSON::ToBool</a></div><div class="ttdeci">bool ToBool(bool &amp;ok) const</div><div class="ttdef"><b>Definition:</b> json.hpp:344</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a8ea48f13230d6651dcef269676cceef7"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a8ea48f13230d6651dcef269676cceef7">sj::JSON::operator=</a></div><div class="ttdeci">enable_if&lt; is_integral&lt; T &gt;::value &amp;&amp;!is_same&lt; T, bool &gt;::value, JSON &amp; &gt;::type operator=(T i)</div><div class="ttdef"><b>Definition:</b> json.hpp:237</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a8eb985a85c034def87355e05390f6a0d"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a8eb985a85c034def87355e05390f6a0d">sj::JSON::operator=</a></div><div class="ttdeci">enable_if&lt; is_same&lt; T, bool &gt;::value, JSON &amp; &gt;::type operator=(T b)</div><div class="ttdef"><b>Definition:</b> json.hpp:232</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a8f45c59bb0d18fe1372ee2582881923b"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a8f45c59bb0d18fe1372ee2582881923b">sj::JSON::JSON</a></div><div class="ttdeci">JSON()</div><div class="ttdef"><b>Definition:</b> json.hpp:115</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_a90a5279cf4799587fcbcd196fe49c0fe"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#a90a5279cf4799587fcbcd196fe49c0fe">sj::JSON::operator[]</a></div><div class="ttdeci">JSON &amp; operator[](const string &amp;key)</div><div class="ttdef"><b>Definition:</b> json.hpp:251</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ab11f62a2a7980884b167f822668e6ce8"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ab11f62a2a7980884b167f822668e6ce8">sj::JSON::ObjectRange</a></div><div class="ttdeci">JSONWrapper&lt; map&lt; string, JSON &gt; &gt; ObjectRange()</div><div class="ttdef"><b>Definition:</b> json.hpp:349</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ab5e786f1c9b152da597059e188c57ce6"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ab5e786f1c9b152da597059e188c57ce6">sj::JSON::operator=</a></div><div class="ttdeci">enable_if&lt; is_floating_point&lt; T &gt;::value, JSON &amp; &gt;::type operator=(T f)</div><div class="ttdef"><b>Definition:</b> json.hpp:242</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ab7cd4c2f027ef283666c1871c198fd70"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ab7cd4c2f027ef283666c1871c198fd70">sj::JSON::dump</a></div><div class="ttdeci">string dump(int depth=1, string tab=&quot;  &quot;) const</div><div class="ttdef"><b>Definition:</b> json.hpp:374</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ac1f3f05c485e4a1717d585d576a69c40"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ac1f3f05c485e4a1717d585d576a69c40">sj::JSON::at</a></div><div class="ttdeci">const JSON &amp; at(const string &amp;key) const</div><div class="ttdef"><b>Definition:</b> json.hpp:274</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ac923ac49bd979cf40a2f019d4f782a12"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ac923ac49bd979cf40a2f019d4f782a12">sj::JSON::operator=</a></div><div class="ttdeci">JSON &amp; operator=(const JSON &amp;other)</div><div class="ttdef"><b>Definition:</b> json.hpp:161</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_acb5870889fdf81f3da7e986fdb55397a"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#acb5870889fdf81f3da7e986fdb55397a">sj::JSON::IsArray</a></div><div class="ttdeci">bool IsArray() const</div><div class="ttdoc">Added for NovelTea.</div><div class="ttdef"><b>Definition:</b> json.hpp:311</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ad098259d00668616f2ca2d984cab5662"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ad098259d00668616f2ca2d984cab5662">sj::JSON::JSON</a></div><div class="ttdeci">JSON(initializer_list&lt; JSON &gt; list)</div><div class="ttdef"><b>Definition:</b> json.hpp:117</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ad450fd17d266b1b1f59e9fb01a2bdc16"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ad450fd17d266b1b1f59e9fb01a2bdc16">sj::JSON::operator=</a></div><div class="ttdeci">JSON &amp; operator=(JSON &amp;&amp;other)</div><div class="ttdef"><b>Definition:</b> json.hpp:130</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ada96d750321819030ffea8cda9e5a788"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ada96d750321819030ffea8cda9e5a788">sj::JSON::at</a></div><div class="ttdeci">JSON &amp; at(const string &amp;key)</div><div class="ttdef"><b>Definition:</b> json.hpp:270</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_adbcdb119110616fcbd248d7807b815fb"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#adbcdb119110616fcbd248d7807b815fb">sj::JSON::JSON</a></div><div class="ttdeci">JSON(T f, typename enable_if&lt; is_floating_point&lt; T &gt;::value &gt;::type *=0)</div><div class="ttdef"><b>Definition:</b> json.hpp:207</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_addec7adde90b0293277c0ef7d050b29e"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#addec7adde90b0293277c0ef7d050b29e">sj::JSON::operator[]</a></div><div class="ttdeci">JSON &amp; operator[](unsigned index)</div><div class="ttdef"><b>Definition:</b> json.hpp:259</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_ae5784e356aa1ce43564f24d304da3284"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#ae5784e356aa1ce43564f24d304da3284">sj::JSON::ArrayRange</a></div><div class="ttdeci">JSONWrapper&lt; deque&lt; JSON &gt; &gt; ArrayRange()</div><div class="ttdef"><b>Definition:</b> json.hpp:355</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_af402e40a025573a81fd4c9eb9fcc9880"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#af402e40a025573a81fd4c9eb9fcc9880">sj::JSON::operator=</a></div><div class="ttdeci">enable_if&lt; is_convertible&lt; T, string &gt;::value, JSON &amp; &gt;::type operator=(T s)</div><div class="ttdef"><b>Definition:</b> json.hpp:247</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_af85e550c8a402ebab4a7ba49b20581fe"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#af85e550c8a402ebab4a7ba49b20581fe">sj::JSON::operator[]</a></div><div class="ttdeci">const JSON &amp; operator[](const string &amp;key) const</div><div class="ttdef"><b>Definition:</b> json.hpp:255</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_afe158b1343c3e6488e7e72ce8e3465ef"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#afe158b1343c3e6488e7e72ce8e3465ef">sj::JSON::Make</a></div><div class="ttdeci">static JSON Make(Class type)</div><div class="ttdef"><b>Definition:</b> json.hpp:214</div></div>
<div class="ttc" id="aclasssj_1_1_j_s_o_n_htm_afe7a971ed2a752545e379b1661b81f02"><div class="ttname"><a href="classsj_1_1_j_s_o_n.htm#afe7a971ed2a752545e379b1661b81f02">sj::JSON::length</a></div><div class="ttdeci">int length() const</div><div class="ttdef"><b>Definition:</b> json.hpp:286</div></div>
<div class="ttc" id="anamespace_novel_tea_1_1_i_d_htm_acddb743dee25ba2f993845c0001bcd9b"><div class="ttname"><a href="namespace_novel_tea_1_1_i_d.htm#acddb743dee25ba2f993845c0001bcd9b">NovelTea::ID::map</a></div><div class="ttdeci">const auto map</div><div class="ttdef"><b>Definition:</b> ProjectDataIdentifiers.hpp:84</div></div>
<div class="ttc" id="anamespacesj_htm"><div class="ttname"><a href="namespacesj.htm">sj</a></div><div class="ttdef"><b>Definition:</b> json.hpp:31</div></div>
<div class="ttc" id="anamespacesj_htm_a6132551f280a7cdbe4238bd0c500e341"><div class="ttname"><a href="namespacesj.htm#a6132551f280a7cdbe4238bd0c500e341">sj::Array</a></div><div class="ttdeci">JSON Array()</div></div>
<div class="ttc" id="anamespacesj_htm_a88220e646869a2a070cb88b31e6f2aa6"><div class="ttname"><a href="namespacesj.htm#a88220e646869a2a070cb88b31e6f2aa6">sj::Object</a></div><div class="ttdeci">JSON Object()</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.htm">include</a></li><li class="navelem"><a class="el" href="dir_52c2ed606da51a5aae4b083c568b1a72.htm">NovelTea</a></li><li class="navelem"><a class="el" href="json_8hpp.htm">json.hpp</a></li>
    <li class="footer">NovelTea Copyright &copy; Thomas Edvalson</li>
  </ul>
</div>
</body>
</html>
